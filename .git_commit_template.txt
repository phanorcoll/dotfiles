# Git Commit Message Template



#<type>(<scope>): <subject>

# - <scope>: Optional. Describes the module, component, or section of the project affected by the commit.

# Example:
# feat(users): add user authentication
# - Implement user authentication using OAuth 2.0.
# - Introduce new routes for user login and registration.

# Best Practices:
# - Use a clear and concise language.
# - Separate the subject from the body with a blank line.
# - Separate the body from the footer with a blank line.
# - Keep the subject line limited to 50 characters.
# - Use the imperative mood in the subject (e.g., "Fix" instead of "Fixed").
# - Provide context and details in the body.
# - Reference issues or related information in the footer.

# Commit Types:
# - feat: A new feature for the user or a significant change.
# - fix: A bug fix.
# - chore: Routine tasks, maintenance, or tooling changes.
# - docs: Documentation changes.
# - style: Code style changes (e.g., formatting).
# - refactor: Code refactorings without adding new features or fixing bugs.
# - test: Adding or modifying tests.
# - build: Changes related to the build system or external dependencies.
# - ci: Changes to the continuous integration (CI) configuration or scripts.
# - perf: Performance improvements.
# - revert: Reverting a previous commit.
